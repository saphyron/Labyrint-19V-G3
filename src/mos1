
	
	public static String allPlayers() {
		
		StringBuilder out = new StringBuilder();
		
		for (Player player : players) {
			out.append(player.getAllInfo() + "\n");
		}
		
		return out.toString();
	}
	
	private static  String[] board = {    // 20x20
			"wwwwwwwwwwwwwwwwwwww",
			"w        ww        w",
			"w w  w  www w  w  ww",
			"w w  w   ww w  w  ww",
			"w  w               w",
			"w w w w w w w  w  ww",
			"w w     www w  w  ww",
			"w w     w w w  w  ww",
			"w   w w  w  w  w   w",
			"w     w  w  w  w   w",
			"w ww ww        w  ww",
			"w  w w    w    w  ww",
			"w        ww w  w  ww",
			"w         w w  w  ww",
			"w        w     w  ww",
			"w  w              ww",
			"w  w www  w w  ww ww",
			"w w      ww w     ww",
			"w   w   ww  w      w",
			"wwwwwwwwwwwwwwwwwwww"
	};
	

	public static Player getPlayerAt(int x, int y) {
		for (Player p : players) {
			if (p.getXpos()==x && p.getYpos()==y) {
				return p;
			}
		}
		return null;
	}
	
	/*static public void playerMoved(int delta_x, int delta_y, String direction, String name) {

		Player me = null;
		for (Player player : players) {
			if (player.name.equalsIgnoreCase(name)) {
				me = player;
			}
		}
		
		if (me == null) {
			System.out.println("could not find player " + name);
			return;
		}
		
		String collisionPlayerName = null;
		int collisionPlayerPoints = -1;
		
		me.direction = direction;
		int x = me.getXpos(),y = me.getYpos();

		if (board[y+delta_y].charAt(x+delta_x)=='w') {
			me.addPoints(-1);
			System.out.println("[serv] player walked into a wall");
		} 
		else {
			Player p = getPlayerAt(x+delta_x,y+delta_y);
			if (p!=null) {
              me.addPoints(10);
              p.addPoints(-10);
              
              collisionPlayerPoints = p.point;
              collisionPlayerName = p.name;
  			  System.out.println("[serv] player walked into a player");
			} else {
				me.addPoints(1);
			
				x+=delta_x;
				y+=delta_y;


				me.setXpos(x);
				me.setYpos(y);
				
	  		    System.out.println("[serv] player walked into a emty place");
			}
		}
		
		String payload = String.format("name=%s&x=%d&y%d&points=%d&direction=%s", name, x, y, me.point, direction);
		
		if (collisionPlayerName != null) {
			payload += String.format("cname=%s&cpoints=%d", collisionPlayerName, collisionPlayerPoints);
		} 
		
		String toSend = "update " + payload;
		
		System.out.println(toSend);
		//emit(toSend);
		
	} */

	capitalizedSentence = clientSentence.toUpperCase() + '\n';
				//outToClient.writeBytes(capitalizedSentence);
				
				outToClient.writeBytes(clientSentence + "\n");
				
				
				listedStrFromClient = Arrays.asList(clientSentence.split(" "));
				
				
				if(listedStrFromClient.size() == 2 && listedStrFromClient.get(0).equals("name")) {
					String name = listedStrFromClient.get(1);
					System.out.println("a new player will be added to storage with name " + name);
					
					String payload = String.format("name=%s&x=%d&y%d&points=%d&direction=%s", name, 6, 7, 0, "up");
					
					
					String toSend = "update " + payload;
					
					
					
				} else if(listedStrFromClient.size() == 2 && DIRECTIONS.contains(listedStrFromClient.get(0)) ) {
					
					String direction = listedStrFromClient.get(0);
					String name = listedStrFromClient.get(1);
					
					System.out.println(direction + " " + name + " update");
					outToClient.writeBytes(direction + " " + name + " update");
					
					/*
					switch (direction) {
						case "up":    TCPServer.playerMoved(0,-1,"up",name);    break;
						case "down":  TCPServer.playerMoved(0,+1,"down",name);  break; 
						case "left":  TCPServer.playerMoved(-1,0,"left",name);  break;
						case "right": TCPServer.playerMoved(+1,0,"right",name); break;
						default: break;
					} */
					
				}